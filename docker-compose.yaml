services:
  nginx:
    image: nginx:latest
    restart: unless-stopped
    container_name: nginx
    ports:
      - 80:80
      - 443:443
    networks:
      - internal
    volumes:
      - ./backend/public:/app/backend/public
      - ./frontend/public:/app/frontend/public
      - ./conf/nginx/:/etc/nginx:ro
      - ./logs/nginx/:/var/log/nginx
      - /etc/localtime:/etc/localtime:ro
    depends_on:
      - frontend
      - backend
  backend:
    build:
      context: .
      dockerfile: ./docker/backend/${ENVIRONMENT}/Dockerfile
      args:
        - NODE_ENV=${ENVIRONMENT}
    restart: unless-stopped
    env_file: .env
    ports:
      - '1337:1337'
    environment:
      DATABASE_CLIENT: ${DATABASE_CLIENT}
      DATABASE_URL : ${DATABASE_URL}
      POSTGRES_USER: ${POSTGRES_USER}
      JWT_SECRET: ${JWT_SECRET}
      ADMIN_JWT_SECRET: ${ADMIN_JWT_SECRET}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      NODE_ENV: ${ENVIRONMENT}
      POSTGRES_DB : ${POSTGRES_DB}
      PORT: 1337
    volumes:
      - ./backend:/app
      - /app/node_modules
      - ./.env:/app/.env
    networks:
      - internal
    depends_on:
      - postgres

  postgres:
    image: postgres
    env_file:
      - .env
    ports:
      - '5436:5432'
    volumes:
      - postgresDB:/var/lib/postgresql/data
    networks:
      - internal
  frontend:
    build:
      context: .
      dockerfile: ./docker/frontend/${ENVIRONMENT}/Dockerfile
      args:
        - NODE_ENV=${ENVIRONMENT}
    restart: unless-stopped
    networks:
      - internal
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
      - ./logs/frontend:/root/.npm/_logs
    env_file:
      - ./.env
    environment:
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
      NEXT_PUBLIC_API_BASE_URL: ${NEXT_PUBLIC_API_BASE_URL}
    ports:
    - '3005:3005'
volumes:
  postgresDB:

networks:
  internal:
    name: kermakas_internal
    driver: bridge